.. Generated by https://github.com/TYPO3-Documentation/t3docs-codesnippets 
.. php:namespace::  TYPO3\CMS\Core\Session

.. php:class:: UserSessionManager

   The purpose of the UserSessionManager is to create new user session objects (acting as a factory),
   depending on the need / request, and to fetch sessions from the Session Backend, effectively
   encapsulating all calls to the SessionManager

   
   
   .. php:method:: createFromRequestOrAnonymous(Psr\\Http\\Message\\ServerRequestInterface $request, string $cookieName)
   
      sessionId is set to ses_id if a cookie is present in the request.
      
      Otherwise a new anonymous session will start.
      
      :param Psr\\Http\\Message\\ServerRequestInterface $request: the request
      :param string $cookieName: the cookieName
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      
   .. php:method:: createFromGlobalCookieOrAnonymous(string $cookieName)
   
      sessionId is set to ses_id if a cookie is present in $_COOKIE.
      
      Otherwise a new anonymous session will start.
      
      :param string $cookieName: the cookieName
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      
   .. php:method:: createAnonymousSession()
   
      Creates a non-fixated session without a user logged in
      
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      
   .. php:method:: hasExpired(TYPO3\\CMS\\Core\\Session\\UserSession $session)
   
      Check if a session has expired. This is the case if sessionLifetime is 0,
      or current time greater than sessionLifetime plus last update time of the session.
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      :returntype: bool
      
   .. php:method:: willExpire(TYPO3\\CMS\\Core\\Session\\UserSession $session, int $gracePeriod)
   
      Check if a session will expire within the given grace period.
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      :param int $gracePeriod: the gracePeriod
      :returntype: bool
      
   .. php:method:: fixateAnonymousSession(TYPO3\\CMS\\Core\\Session\\UserSession $session, bool $isPermanent = false)
   
      Persists an anonymous session without a user logged in,
      in order to store session data between requests.
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: The user session to fixate
      :param bool $isPermanent: If TRUE, the session will get the is_permanent flag, default: false
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      :returns: a new session object with an updated ses_tstamp (allowing to keep the session alive)
      
   .. php:method:: elevateToFixatedUserSession(TYPO3\\CMS\\Core\\Session\\UserSession $session, int $userId, bool $isPermanent = false)
   
      Removes existing entries, creates and returns a new user session record
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: The user session to recreate
      :param int $userId: The user id the session belongs to
      :param bool $isPermanent: If TRUE, the session will get the is_permanent flag, default: false
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      :returns: The newly created user session object
      
   .. php:method:: regenerateSession(string $sessionId, array $existingSessionRecord = [], bool $anonymous = false)
   
      Regenerate the session ID and transfer the session to new ID
      Call this method whenever a user proceeds to a higher authorization level
      e.g. when an anonymous session is now authenticated.
      
      :param string $sessionId: The session id
      :param array $existingSessionRecord: If given, this session record will be used instead of fetching again, default: []
      :param bool $anonymous: If true session will be regenerated as anonymous session, default: false
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      
   .. php:method:: updateSessionTimestamp(TYPO3\\CMS\\Core\\Session\\UserSession $session)
   
      Updates the session timestamp for the given user session if
      the session is marked as "needs update" (which means the current
      timestamp is greater than "last updated + a specified gracetime-value".
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      :returns: a modified user session with a last updated value if needed
      
   .. php:method:: isSessionPersisted(TYPO3\\CMS\\Core\\Session\\UserSession $session)
   
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      :returntype: bool
      
   .. php:method:: removeSession(TYPO3\\CMS\\Core\\Session\\UserSession $session)
   
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      
   .. php:method:: updateSession(TYPO3\\CMS\\Core\\Session\\UserSession $session)
   
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      
   .. php:method:: collectGarbage(int $garbageCollectionProbability = 1)
   
      :param int $garbageCollectionProbability: the garbageCollectionProbability, default: 1
      
   .. php:method:: create(string $loginType, int $sessionLifetime = NULL, TYPO3\\CMS\\Core\\Session\\SessionManager $sessionManager = NULL, TYPO3\\CMS\\Core\\Authentication\\IpLocker $ipLocker = NULL)
   
      Create a UserSessionManager instance for the given login type. Has several optional arguments used for testing purposes
      to inject dummy objects if needed.
      
      Ideally, this factory encapsulates all "TYPO3_CONF_VARS" options, so the actual object does not need to consider any
      global state.
      
      :param string $loginType: the loginType
      :param int $sessionLifetime: the sessionLifetime, default: NULL
      :param TYPO3\\CMS\\Core\\Session\\SessionManager $sessionManager: the sessionManager, default: NULL
      :param TYPO3\\CMS\\Core\\Authentication\\IpLocker $ipLocker: the ipLocker, default: NULL
      :returntype: self
      
   .. php:method:: setLogger(Psr\\Log\\LoggerInterface $logger)
   
      Sets a logger.
      
      :param Psr\\Log\\LoggerInterface $logger: the logger
